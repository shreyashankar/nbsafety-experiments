n = 500
data = np.random.choice(['H', 'T'], n)
def fair(data):
    'Compute the fraction of the tosses that have a value of `H`.'
    count = 0
    for c in data:
        if (c == 'H'):
            count += 1
    return (count / len(data))
def bootstrap_data(data):
    'Perform a single boostrap resampling of the input data array.'
    return np.array([np.random.choice(data) for r in range(len(data))])
def bootstrap_function(data, f, n):
    'Compute a function on data bootstrapped n times.\n        \n        Parameters\n        ----------\n        data: ndarray\n            The input data to be resampled.\n        f: function(data)\n            The function to be applied to the boostrapped data. The function should take a single\n            argument (the data) and return a float.\n        n: int\n            The number of times to resample the data\n            \n        Returns\n        -------\n        result: ndarray\n            An n element array of the values of the function applied to the resampled data.\n        '
    result = []
    for sample in range(n):
        resample = bootstrap_data(data)
        resample_functioned = f(resample)
        result.append(resample_functioned)
    return np.array(result)
fair_boot = bootstrap_function(data, fair, 200)
np.percentile(fair_boot, 0.925), np.percentile(fair_boot, 0.975)