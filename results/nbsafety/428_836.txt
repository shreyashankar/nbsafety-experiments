def predict_class(X, mu, sigma, priors):
    a0 = (np.log((priors[0] / priors[1])) - (((0.5 * (mu[0, :] + mu[1, :]).T) * np.linalg.inv(sigma)) * (mu[0, :] - mu[1, :])))
    a = (np.linalg.inv(sigma) * (mu[0, :] - mu[1, :]))
    pred = np.zeros((X.shape[0],))
    for row in np.arange(X.shape[0]):
        if ((a0 + np.sum((a * X[row, :]))) > 0):
            pred[row] = 1
        else:
            pred[row] = 0
    return pred
def calc_ccm(X, y):
    ' Calculates class conditional mean \n        \n        inputs:\n        -------\n        * X - Data\n        * y - labels\n        \n        returns:\n        --------\n        * mu - MLE of means of class conditional densities\n        '
    classes = np.unique(y)
    nClasses = len(classes)
    mu = np.zeros((nClasses, X.shape[1]))
    for (i, cls) in enumerate(classes):
        mu[i] = X[np.where((y == cls))[0], :].mean(axis=0)
    return mu
def calc_cov(X, y, mu):
    ' Calculate shared covariance matrix'
    classes = np.unique(y)
    nClasses = len(classes)
    sigma = np.zeros((nClasses, nClasses))
    for (i, cls) in enumerate(classes):
        x = X[np.where((y == cls))[0], :]
        sigma += np.dot((x - mu[i, :]).T, (x - mu[i, :]))
    sigma /= (X.shape[0] - nClasses)
    return sigma
def max_likelihood(X, y):
    ' Calculates class conditional estimates.\n        \n        params:\n        -------\n        * X - Data\n        * y - labels\n        \n        returns:\n        --------\n        * thetas - Estimates of model parameters\n        '
    mu = calc_ccm(X, y)
    sigma = calc_cov(X, y, mu)
    return (mu, sigma)
def calc_priors(X, y):
    classes = np.unique(y)
    nClasses = len(classes)
    priors = np.zeros((nClasses,))
    for (i, cls) in enumerate(classes):
        priors[i] = (len(np.where((y == cls))[0]) / float(X.shape[0]))
    return priors
def main4():
    test = np.genfromtxt('./classification_test.txt')
    train = np.genfromtxt('./classification_train.txt')
    test_X = test[:, :(- 1)]
    train_X = train[:, :(- 1)]
    train_b = train[:, (- 1)]
    test_b = test[:, (- 1)]
    (train_mu, train_sigma) = max_likelihood(train_X, train_b)
    train_priors = calc_priors(train_X, train_b)
    (test_mu, test_sigma) = max_likelihood(test_X, test_b)
    test_priors = calc_priors(test_X, test_b)
    train_yhat = predict_class(train_X, train_mu, train_sigma, train_priors)
    test_yhat = predict_class(test_X, test_mu, test_sigma, test_priors)
    ('Training classification error rate: %f' % calc_errors(train_yhat, train_b))
    ('Test classification error rate: %f' % calc_errors(test_yhat, test_b))
main4()