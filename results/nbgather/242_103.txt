np.random.choice(np.array([H,T]))
np.random.choice(np.array(["H","T"]))
np.random.choice(np.array(["H","T"]))
np.random.choice(np.array(["H","T"]))
np.random.choice(np.array(["H","T"]))
np.random.choice(np.array(["H","T"]), 10)
np.random.choice(np.array(["H","T"]), 10, None)
np.random.choice(np.array(["H","T"]), 10)
np.random.choice(np.array(["H","T"]), 10)
n = 500
data = np.random.choice(["H","T"], n)
data = np.random.choice(["H","T"], n)
data = np.random.choice(["H","T"], n)
data = np.random.choice(["H","T"], n)
def bootstrap_function(data, f, n):
    """Compute a function on data bootstrapped n times.
    Parameters
    ----------
    data: ndarray
        The input data to be resampled.
    f: function(data)
        The function to be applied to the boostrapped data. The function should take a single
        argument (the data) and return a float.
    n: int
        The number of times to resample the data
    Returns
    -------
    result: ndarray
        An n element array of the values of the function applied to the resampled data.
    """
    result = np.array(None)
    for sample in range(n):
        np.append(result, np.array([np.random.choice(data) for r in range(data)]))
def bootstrap_function(data, f, n):
    """Compute a function on data bootstrapped n times.
    Parameters
    ----------
    data: ndarray
        The input data to be resampled.
    f: function(data)
        The function to be applied to the boostrapped data. The function should take a single
        argument (the data) and return a float.
    n: int
        The number of times to resample the data
    Returns
    -------
    result: ndarray
        An n element array of the values of the function applied to the resampled data.
    """
    result = np.array(None)
    for sample in range(n):
        np.append(result, f(np.array([np.random.choice(data) for r in range(data)])))
    return result
def bootstrap_function(data, f, n):
    """Compute a function on data bootstrapped n times.
    Parameters
    ----------
    data: ndarray
        The input data to be resampled.
    f: function(data)
        The function to be applied to the boostrapped data. The function should take a single
        argument (the data) and return a float.
    n: int
        The number of times to resample the data
    Returns
    -------
    result: ndarray
        An n element array of the values of the function applied to the resampled data.
    """
    result = np.array(None)
    for sample in range(n):
        resample = np.array([np.random.choice(data) for r in range(data)])
        resample_functioned = f()
        np.append(result, )
    return result
def bootstrap_function(data, f, n):
    """Compute a function on data bootstrapped n times.
    Parameters
    ----------
    data: ndarray
        The input data to be resampled.
    f: function(data)
        The function to be applied to the boostrapped data. The function should take a single
        argument (the data) and return a float.
    n: int
        The number of times to resample the data
    Returns
    -------
    result: ndarray
        An n element array of the values of the function applied to the resampled data.
    """
    result = np.array(None)
    for sample in range(n):
        resample = np.array([np.random.choice(data) for r in range(data)])
        resample_functioned = f()
        np.append(result, resample_functioned)
    return result
def bootstrap_function(data, f, n):
    """Compute a function on data bootstrapped n times.
    Parameters
    ----------
    data: ndarray
        The input data to be resampled.
    f: function(data)
        The function to be applied to the boostrapped data. The function should take a single
        argument (the data) and return a float.
    n: int
        The number of times to resample the data
    Returns
    -------
    result: ndarray
        An n element array of the values of the function applied to the resampled data.
    """
    result = np.array(None)
    for sample in range(n):
        resample = np.array(np.random.choice(data) for r in range(data))
        resample_functioned = f()
        np.append(result, resample_functioned)
    return result
def bootstrap_function(data, f, n):
    """Compute a function on data bootstrapped n times.
    Parameters
    ----------
    data: ndarray
        The input data to be resampled.
    f: function(data)
        The function to be applied to the boostrapped data. The function should take a single
        argument (the data) and return a float.
    n: int
        The number of times to resample the data
    Returns
    -------
    result: ndarray
        An n element array of the values of the function applied to the resampled data.
    """
    result = np.array(None)
    for sample in range(n):
        resample = np.array( [np.random.choice(data) for r in range(len(data))] )
        resample_functioned = f()
        np.append(result, resample_functioned)
    return result
def bootstrap_function(data, f, n):
    """Compute a function on data bootstrapped n times.
    Parameters
    ----------
    data: ndarray
        The input data to be resampled.
    f: function(data)
        The function to be applied to the boostrapped data. The function should take a single
        argument (the data) and return a float.
    n: int
        The number of times to resample the data
    Returns
    -------
    result: ndarray
        An n element array of the values of the function applied to the resampled data.
    """
    result = np.array(None)
    for sample in range(n):
        resample = np.array( [np.random.choice(data) for r in range(len(data))] )
        resample_functioned = f(resample)
        np.append(result, resample_functioned)
    return result
def bootstrap_function(data, f, n):
    """Compute a function on data bootstrapped n times.
    Parameters
    ----------
    data: ndarray
        The input data to be resampled.
    f: function(data)
        The function to be applied to the boostrapped data. The function should take a single
        argument (the data) and return a float.
    n: int
        The number of times to resample the data
    Returns
    -------
    result: ndarray
        An n element array of the values of the function applied to the resampled data.
    """
    result = np.array(None)
    for sample in range(n):
        resample = np.array( [np.random.choice(data) for r in range(len(data))] )
        resample_functioned = f(resample)
        np.append(result, resample_functioned)
    return result
def bootstrap_data(data):
    """Perform a single boostrap resampling of the input data array."""
    return np.array( [np.random.choice(data) for r in range(len(data))] )
def bootstrap_function(data, f, n):
    """Compute a function on data bootstrapped n times.
    Parameters
    ----------
    data: ndarray
        The input data to be resampled.
    f: function(data)
        The function to be applied to the boostrapped data. The function should take a single
        argument (the data) and return a float.
    n: int
        The number of times to resample the data
    Returns
    -------
    result: ndarray
        An n element array of the values of the function applied to the resampled data.
    """
    result = []
    for sample in range(n):
        resample = bootstrap_data(data)
        resample_functioned = f(resample)
        result.append(resample_functioned)
    return np.array(result)
n = 500
data = np.random.choice(["H","T"], n)
def fair(data):
    """Compute the fraction of the tosses that have a value of `H`."""
    count = 0
    for c in data:
        if c == "H":
            count += 1
    return count/len(data)
def bootstrap_data(data):
    """Perform a single boostrap resampling of the input data array."""
    return np.array( [np.random.choice(data) for r in range(len(data))] )
def bootstrap_function(data, f, n):
    """Compute a function on data bootstrapped n times.
    Parameters
    ----------
    data: ndarray
        The input data to be resampled.
    f: function(data)
        The function to be applied to the boostrapped data. The function should take a single
        argument (the data) and return a float.
    n: int
        The number of times to resample the data
    Returns
    -------
    result: ndarray
        An n element array of the values of the function applied to the resampled data.
    """
    result = []
    for sample in range(n):
        resample = bootstrap_data(data)
        resample_functioned = f(resample)
        result.append(resample_functioned)
    return np.array(result)
fair_boot = bootstrap_function(data, fair, 200)
np.mean(fair_boot)
np.mean(fair_boot)
np.percentile(fair_boot, 0.95)
np.percentile(fair_boot, 0.925), np.percentile(fair_boot, 0.975)