lambertw(np.linspace(0,1))
plt.plot(np.real(lambertw(np.linspace(0,1))))
U = np.linspace(v_initial, 50, 1000)
vinv = m_rocket/burn_rate +     (v_initial - u)/g*lambertw(         m_rocket/b*        g/(U - v_initial)*        np.exp(-burn_rate/(U - v_initial)*a))
vinv = m_rocket/burn_rate +     (v_initial - U)/g*lambertw(         m_rocket/b*        g/(U - v_initial)*        np.exp(-burn_rate/(U - v_initial)*a))
vinv = m_rocket/burn_rate +     (v_initial - U)/g*lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp(-burn_rate/(U - v_initial)*a))
U = np.linspace(v_initial+1, 50, 1000)
vinv = m_rocket/burn_rate +     (v_initial - U)/g*lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp(-burn_rate/(U - v_initial)*a))
plt.plot(U, vinv)
vinv = m_rocket/burn_rate +     (v_initial - U)/g*np.real(lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp(-burn_rate/(U - v_initial)*a)))
plt.plot(U, vinv)
U = np.linspace(v_initial+1, -450, 1000)
vinv = m_rocket/burn_rate +     (v_initial - U)/g*np.real(lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp(-burn_rate/(U - v_initial)*a)))
vinv = m_rocket/burn_rate -     (U - v_initial)/g*np.real(lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp(-burn_rate/(U - v_initial)*(f_engine - m_rocket*g))))
vinv = m_rocket/burn_rate -     (U - v_initial)/g*np.real(lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp(-burn_rate/(U - v_initial)*(f_engine - m_rocket*g))))
vinv = m_rocket/burn_rate -     (U - v_initial)/g*np.real(lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp(1/(U - v_initial)*(1/burn_rate)*(f_engine - m_rocket*g))))
vinv = m_rocket/burn_rate -     (U - v_initial)/g*np.real(lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp(1.0/(U - v_initial)*(1/burn_rate)*(f_engine - m_rocket*g))))
vinv = m_rocket/burn_rate -     (U - v_initial)/g*np.real(lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp((f_engine - m_rocket*g)/(burn_rate*(U - v_initial)))))
np.exp((f_engine - m_rocket*g)/(burn_rate*(U - v_initial)))
U = np.linspace(v_initial, -450, 1000)
vinv = m_rocket/burn_rate -     (U - v_initial)/g*np.real(lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp((f_engine - m_rocket*g)/(burn_rate*(U - v_initial)))))
plt.plot(free_fall_time)
plt.plot(U, free_fall_time)
plt.plot(U, free_fall_time)
plt.plot(U, burn_to_free_fall_ratio)
plt.plot(U, burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1))
plt.plot(U, np.exp(burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1)))
plt.plot(U, np.exp(burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1)))
U = np.linspace(-425, -200, 1000)
vinv = m_rocket/burn_rate -     (U - v_initial)/g*np.real(lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp((f_engine - m_rocket*g)/(burn_rate*(U - v_initial)))))
plt.plot(U, free_fall_time)
plt.plot(U, burn_to_free_fall_ratio)
plt.plot(U, burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1))
plt.plot(U, np.exp(burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1)))
U = np.linspace(-350, -200, 1000)
vinv = m_rocket/burn_rate -     (U - v_initial)/g*np.real(lambertw(         m_rocket/burn_rate*        g/(U - v_initial)*        np.exp((f_engine - m_rocket*g)/(burn_rate*(U - v_initial)))))
plt.plot(U, free_fall_time)
plt.plot(U, burn_to_free_fall_ratio)
plt.plot(U, burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1))
plt.plot(U, np.exp(burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1)))
plt.plot(U, burn_to_free_fall_ratio*    np.exp(burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1)))
plt.plot(U, np.real(lambertw(burn_to_free_fall_ratio*    np.exp(burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1)))))
plt.plot(U, free_fall_time*np.real(lambertw(burn_to_free_fall_ratio*    np.exp(burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1)))))
plt.plot(U, burn_time - free_fall_time*np.real(lambertw(burn_to_free_fall_ratio*    np.exp(burn_to_free_fall_ratio*(f_engine/(g*m_rocket) - 1)))))
T_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v_with_fuel_use)) - accel_at_zero)/jerk_at_zero
D_stop = np.abs(v_initial*T_stop - 0.5*g*T_stop**2 + f_engine/burn_rate**2*((burn_rate*T - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*T_stop)) + burn_rate*T_stop))
D_stop = np.abs(v_initial*T_stop - 0.5*g*T_stop**2 + f_engine/burn_rate**2*((burn_rate*T_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*T_stop)) + burn_rate*T_stop))
V_freefall = x_initial + v_initial * T - 0.5 * g * T**2
T_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-V_freefall)) - accel_at_zero)/jerk_at_zero
V_freefall = v_initial  - g * T
T_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-V_freefall)) - accel_at_zero)/jerk_at_zero
D_stop = np.abs(v_initial*T_stop - 0.5*g*T_stop**2 + f_engine/burn_rate**2*((burn_rate*T_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*T_stop)) + burn_rate*T_stop))
T_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-V_freefall)) - accel_at_zero)/jerk_at_zero
D_stop = np.abs(v_initial*T_stop - 0.5*g*T_stop**2 + f_engine/burn_rate**2*((burn_rate*T_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*T_stop)) + burn_rate*T_stop))
T_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-V_freefall)) - accel_at_zero)/jerk_at_zero
D_stop = np.abs(v_initial*T_stop - 0.5*g*T_stop**2 + f_engine/burn_rate**2*((burn_rate*T_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*T_stop)) + burn_rate*T_stop))
D_stop = np.abs(v_initial*T_stop - 0.5*g*T_stop**2 - f_engine/burn_rate**2*((burn_rate*T_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*T_stop)) + burn_rate*T_stop))
T_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-V_freefall)) - accel_at_zero)/jerk_at_zero
D_stop = np.abs(v_initial*T_stop - 0.5*g*T_stop**2 - f_engine/burn_rate**2*((burn_rate*T_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*T_stop)) + burn_rate*T_stop))
def x(t_fire):
    return x_initial + v_initial*t_fire - f_engine/burn_rate**2*((burn_rate*t_fire - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*t_fire)) + burn_rate*t_fire)
def d(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t, a)
    d_stop = np.abs(v_initial*t_stop - 0.5*g*t_stop**2 - f_engine/burn_rate**2*((burn_rate*t_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*t_stop)) + burn_rate*t_stop))
    return d_stop
t_fire_no_fuel = np.sqrt((v_initial/g)**2 + 2*(h - (v_initial**2/(2*a)))/(g*(g/a + 1))) - (v_initial/g)
t_fire_no_fuel = np.sqrt((v_initial/g)**2 + 2*(x_initial - (v_initial**2/(2*a)))/(g*(g/a + 1))) - (v_initial/g)
t_fire_no_fuel = np.sqrt((v_initial/g)**2 + 2*(x_initial - (v_initial**2/(2*a)))/(g*(g/(f_engine/m_rocket - g) + 1))) - (v_initial/g)
t_fire_no_fuel = np.sqrt((v_initial/g)**2 + 2*(x_initial - (v_initial**2/(2*a)))/(g*(g/(f_engine/m_rocket - g) + 1))) - (v_initial/g)
t_fire_no_fuel = np.sqrt((v_initial/g)**2 + 2*(x_initial - (v_initial**2/(2*(f_engine/m_rocket - g))))/(g*(g/(f_engine/m_rocket - g) + 1))) - (v_initial/g)
t_fire = newton(lambda t: x(t) - d(t), 10)
def t_stop(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t, a)
def d(t_fire):
    t_stop = t_stopping_burn(t_fire)
    d_stop = np.abs(v_initial*t_stop - 0.5*g*t_stop**2 - f_engine/burn_rate**2*((burn_rate*t_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*t_stop)) + burn_rate*t_stop))
    return d_stop
def t_stopping_burn(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t, a)
def t_stopping_burn(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t, a)
    return t_stop
t_fire = newton(lambda t: x(t) - d(t), 10)
def d(t_fire):
    t_stop = t_stopping_burn(t_fire)
    d_stop = np.abs(v_initial*t_stop - 0.5*g*t_stop**2 - f_engine/burn_rate**2*((burn_rate*t_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*t_stop)) + burn_rate*t_stop))
    return d_stop
def t_stopping_burn(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t, a)
    return t_stop
t_fire = newton(lambda t: x(t) - d(t), 10)
T_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-V_freefall)) - accel_at_zero)/jerk_at_zero
D_stop = np.abs(v_initial*T_stop - 0.5*g*T_stop**2 - f_engine/burn_rate**2*((burn_rate*T_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*T_stop)) + burn_rate*T_stop))
def d(t_fire):
    t_stop = t_stopping_burn(t_fire)
    d_stop = np.abs(v_initial*t_stop - 0.5*g*t_stop**2 - f_engine/burn_rate**2*((burn_rate*t_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*t_stop)) + burn_rate*t_stop))
    return d_stop
def t_stopping_burn(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t, a)
    return t_stop
t_fire = newton(lambda t: x(t) - d(t), 10)
def d(t_fire):
    t_stop = t_stopping_burn(t_fire)
    d_stop = np.abs(v_initial*t_stop - 0.5*g*t_stop**2 + f_engine/burn_rate**2*(burn_rate*t_stop - (burn_rate*t_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*t_stop))))
    return d_stop
def t_stopping_burn(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t, a)
    return t_stop
t_fire = newton(lambda t: x(t) - d(t), 10)
def d(t_fire):
    t_stop = t_stopping_burn(t_fire)
    d_stop = np.abs(v_initial*t_stop - 0.5*g*t_stop**2 + f_engine/burn_rate**2*(burn_rate*t_stop - (m_rocket - burn_rate*t_stop)*np.log(m_rocket/(m_rocket-burn_rate*t_stop))))
    return d_stop
def t_stopping_burn(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t, a)
    return t_stop
t_fire = newton(lambda t: x(t) - d(t), 10)
T_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-V_freefall)) - accel_at_zero)/jerk_at_zero
D_stop = np.abs(v_initial*T_stop - 0.5*g*T_stop**2 - f_engine/burn_rate**2*((burn_rate*T_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*T_stop)) + burn_rate*T_stop))
def d(t_fire):
    t_stop = t_stopping_burn(t_fire)
    d_stop = np.abs(v_initial*t_stop - 0.5*g*t_stop**2 + f_engine/burn_rate**2*(burn_rate*t_stop - (m_rocket - burn_rate*t_stop)*np.log(m_rocket/(m_rocket-burn_rate*t_stop))))
    return d_stop
def t_stopping_burn(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t, a)
    return t_stop
def t_stopping_burn(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t_stop_approx, a)
    return t_stop
t_fire = newton(lambda t: x(t) - d(t), 10)
t_stopping_burn(t_fire)
v_initial - g*t_stopping_burn(t_fire)
v= v_initial - g*t_stopping_burn(t_fire)
def d(t_fire):
    v = v_initial - g * t_fire
    t_stop = t_stopping_burn(t_fire)
    d_stop = np.abs(v*t_stop - 0.5*g*t_stop**2 + f_engine/burn_rate**2*(burn_rate*t_stop - (m_rocket - burn_rate*t_stop)*np.log(m_rocket/(m_rocket-burn_rate*t_stop))))
    return d_stop
def t_stopping_burn(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t_stop_approx, a)
    return t_stop
t_fire = newton(lambda t: x(t) - d(t), 10)
T_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-V_freefall)) - accel_at_zero)/jerk_at_zero
D_stop = np.abs(v_initial*T_stop - 0.5*g*T_stop**2 - f_engine/burn_rate**2*((burn_rate*T_stop - m_rocket)*np.log(m_rocket/(m_rocket-burn_rate*T_stop)) + burn_rate*T_stop))
def d(t_fire):
    v = v_initial - g * t_fire
    t_stop = t_stopping_burn(t_fire)
    d_stop = np.abs(v*t_stop - 0.5*g*t_stop**2 + f_engine/burn_rate**2*(burn_rate*t_stop - (m_rocket - burn_rate*t_stop)*np.log(m_rocket/(m_rocket-burn_rate*t_stop))))
    return d_stop
def t_stopping_burn(t_fire):
    v = v_initial - g * t_fire
    t_stop_approx = (np.sqrt(accel_at_zero**2 + 2*jerk_at_zero*(v_desired-v)) - accel_at_zero)/jerk_at_zero
    t_stop = newton(v_from_initial(v), t_stop_approx, a)
    return t_stop
t_fire = newton(lambda t: x(t) - d(t), 10)
t_stopping_burn(t_fire)
d(t_fire)
(m_rocket - burn_rate * t_stopping_burn(t_fire))/m_rocket