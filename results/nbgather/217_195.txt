index = pd.date_range('1/1/2000', periods=8)
s = pd.Series(np.random.randn(5), index=['a', 'b', 'c', 'd', 'e'])
df = pd.DataFrame(np.random.randn(8, 3), index=index, columns=['A', 'B', 'C'])
wp = pd.Panel(np.random.randn(2, 5, 4), items=['Item', 'Item2'],
              major_axis=pd.date_range('1/1/2000', periods=5),
              minor_axis=['A','B','C','D'])
long_series = pd.Series(np.random.randn(1000))
df = pd.DataFrame({'one' : pd.Series(np.random.randn(3), index=['a', 'b', 'c']),
                   'two' : pd.Series(np.random.randn(4), index=['a', 'b', 'c', 'd']),
                   'three' : pd.Series(np.random.randn(3), index=['b', 'c', 'd'])})
row = df.ix[1]
column = df['two']
df.sub(row, axis='columns')
df.sub(row, axis=1)
df.sub(column, axis='index')
df.sub(column, axis=0)
dfmi = df.copy()
df.add(df2, fill_value=0)
df.gt(df2)
df2.ne(df)
pd.DataFrame(columns=list('ABC')).empty
pd.Series([True]).bool()
pd.Series([False]).bool()
pd.DataFrame([[True]]).bool()
pd.DataFrame([[False]]).bool()
df1 = pd.DataFrame({'col':['foo', 0, np.nan]})
df2 = pd.DataFrame({'col':[np.nan, 0, 'foo']}, index=[2,1,0])
pd.Series(['foo', 'bar', 'baz']) == 'foo'
pd.Index(['foo', 'bar', 'baz']) == 'foo'
pd.Series(['foo', 'bar', 'baz']) == pd.Index(['foo', 'bar', 'qux'])
pd.Series(['foo', 'bar', 'baz']) == np.array(['foo', 'bar', 'qux'])
np.array([1, 2, 3]) == np.array([2])
np.array([1, 2, 3]) == np.array([1, 2])
df1 = pd.DataFrame({'A' : [1., np.nan, 3., 5., np.nan],
                    'B' : [np.nan, 2., 3., np.nan, 6.]})
df2 = pd.DataFrame({'A' : [5., 2., 4., np.nan, 3., 7.],
                    'B' : [np.nan, np.nan, 3., 4., 6., 8.]})
df.mean(0)
df.mean(1)
df.sum(0, skipna=False)
df.sum(axis=1, skipna=True)
ts_stand = (df - df.mean()) / df.std()
xs_stand = df.sub(df.mean(1), axis=0).div(df.std(1), axis=0)
df.cumsum()
np.mean(df['one'])
np.mean(df['one'].values)
series = pd.Series(np.random.randn(500))
series = pd.Series(np.random.randn(1000))
frame = pd.DataFrame(np.random.randn(1000, 5), columns=['a', 'b', 'c', 'd', 'e'])
s = pd.Series(['a', 'a', 'b', 'b', 'a', 'a', np.nan, 'c', 'd', 'a'])
frame = pd.DataFrame({'a': ['Yes', 'Yes', 'No', 'No'], 'b': range(4)})
s1 = pd.Series(np.random.randn(5))
df1 = pd.DataFrame(np.random.randn(5,3), columns=['A','B','C'])
df3 = pd.DataFrame([2, 1, 1, 3, np.nan], columns=['A'], index=list('edcba'))
data = np.random.randint(0, 7, size=50)
s = pd.Series(data)
pd.value_counts(data)
s5 = pd.Series([1, 1, 3, 3, 3, 5, 5, 7, 7, 7])
df5 = pd.DataFrame({"A": np.random.randint(0, 7, size=50),
                    "B": np.random.randint(-10, 15, size=50)})
arr = np.random.randn(20)
factor = pd.cut(arr, 4)
factor = pd.cut(arr, [-5, -1, 0, 1, 5])
arr = np.random.randn(30)
factor = pd.qcut(arr, [0, .25, .5, .75, 1])
pd.value_counts(factor)
arr = np.random.randn(20)
factor = pd.cut(arr, [-np.inf, 0, np.inf])
tsdf = pd.DataFrame(np.random.randn(1000, 3), columns=['A', 'B', 'C'], index=pd.date_range('1/1/2000', periods=1000))
s = pd.Series(['six', 'seven', 'six', 'seven', 'six'],
              index=['a', 'b', 'c', 'd', 'e'])
t = pd.Series({'six' : 6., 'seven' : 7.})
s = pd.Series(np.random.randn(5), index=['a', 'b', 'c', 'd', 'e'])
s = pd.Series(np.random.randn(5), index=['a', 'b', 'c', 'd', 'e'])
rng = pd.date_range('1/3/2000', periods=8)
ts = pd.Series(np.random.randn(8), index=rng)
df = pd.DataFrame({'col1' : np.random.randn(3), 'col2' : np.random.randn(3)},
                  index=['a', 'b', 'c'])
df = pd.DataFrame({'a': [1, 2, 3], 'b': ['a', 'b', 'c']})
df_orig = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])
df2 = pd.DataFrame({'x': [1, 2, 3], 'y': [4, 5, 6]})
df2_t = pd.DataFrame(dict((idx,values) for idx, values in df2.iterrows()))
s = pd.Series(pd.date_range('20130101 09:10:12', periods=4))
s = pd.Series(pd.date_range('20130101', periods=4))
s = pd.Series(pd.period_range('20130101', periods=4))
s = pd.Series(pd.period_range('20130101', periods=4, freq='D'))
s = pd.Series(pd.timedelta_range('1 day 00:00:05', periods=4, freq='s'))
s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])
df1 = pd.DataFrame({'one':[2,1,1,1],'two':[1,3,2,4],'three':[5,4,3,2]})
ser = pd.Series([1, 2, 3])
ser = pd.Series([3, 1, 2])
ser.searchsorted([0, 3], sorter=np.argsort(ser))
s = pd.Series(np.random.permutation(10))
df = pd.DataFrame({'a': [-2, -1, 1, 10, 8, 11, -1],
                   'b': list('abdceff'),
                   'c': [1.0, 2.0, 4.0, 3.2, np.nan, 3.0, 4.0]})
dft = pd.DataFrame(dict(A = np.random.rand(3),
                           B = 1,
                           C = 'foo',
                       D = pd.Timestamp('20010102'),
                       E = pd.Series([1.0]*3).astype('float32'),
                                    F = False,
                                    G = pd.Series([1]*3,dtype='int8')))
pd.Series([1, 2, 3, 4, 5, 6.])
pd.Series([1, 2, 3, 6., 'foo'])
df1 = pd.DataFrame(np.random.randn(8, 1), columns=['A'], dtype='float32')
df3 = df1.reindex_like(df2).fillna(value=0.0) + df2
df3['E'] = '1'
df3['D'] = df3['D'].astype('float16')
df3['E'] = df3['E'].astype('int32')
dfi = df3.astype('int32')
dfa = df3.copy()
dfa['A'] = dfa['A'].astype('float32')