def predict_class(X, mu, sigma, priors):
        a0 = np.log(priors[0]/priors[1]) - 0.5*(mu[0,:] + mu[1,:]).T*np.linalg.inv(sigma)*(mu[0,:]-mu[1,:])
        a = np.linalg.inv(sigma)*(mu[0,:] - mu[1,:])
        pred = np.zeros((X.shape[0],))
        for row in np.arange(X.shape[0]):
            if (a0 + np.sum( a*X[row,:] )) > 0:
                pred[row] = 1
            else:
                pred[row] = 0
        return pred
predict_class(test_X, m, s, np.array([0.5,0.5]))
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
predict_class(train_X, mu, sigma, priors)
yhat = predict_class(train_X, mu, sigma, priors)
yhat = predict_class(train_X, mu, sigma, priors)
yhat = predict_class(train_X, mu, sigma, priors)
yhat = predict_class(train_X, mu, sigma, priors)
yhat = predict_class(train_X, mu, sigma, priors)
yhat = predict_class(train_X, mu, sigma, priors)
yhat = predict_class(train_X, mu, sigma, priors)
main4()
main4()
main4()
main4()
main4()