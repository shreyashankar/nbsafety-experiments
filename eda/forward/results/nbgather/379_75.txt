    """ Declarative mapping to `tbl_job` to `KongJob` class."""
    job_status_err = 3
    id = Column(sqla.types.Integer, primary_key = True)
class KongJob(Base):
    type = Column(sqla.types.Integer, default = job_type_seed)
    """ Declarative mapping to `tbl_job` to `KongJob` class."""
    __tablename__ = 'tbl_job'
    __table_args__ = {'extend_existing':True}    # 이미 users 테이블이 존재하는 경우 덮어씀
    job_type_seed = 0
    job_type_rule = 1
    job_status_ready = 0
    job_status_assigned = 1
    job_status_done = 2
    idx_beg = Column(sqla.types.Integer, nullable = False)
    job_status_err = 3
    id = Column(sqla.types.Integer, primary_key = True)
    type = Column(sqla.types.Integer, default = job_type_seed)
    idx_beg = Column(sqla.types.Integer, nullable = False)
    idx_end = Column(sqla.types.Integer, nullable = False)
    status = Column(sqla.types.Integer, default = job_status_ready)
    worker = Column(sqla.types.String(50), nullable = True)
    ctime = Column(sqla.types.DateTime, default = func.now())
    idx_end = Column(sqla.types.Integer, nullable = False)
    atime = Column(sqla.types.DateTime, default = func.now())
    def __repr__(self):
        return  '<User (id = {0}, type={1}, idx_b={2}, '                'idx_e = {3}, status={4}, worker={5}, '                'ctime={6}, atime={7}>'.format(
                    self.id,
                    self.type,
                    self.idx_beg,
                    self.idx_end,
                    self.status,
                    self.worker,
    status = Column(sqla.types.Integer, default = job_status_ready)
                    self.ctime,
                    self.atime)
class KongDataBroker:
    worker = Column(sqla.types.String(50), nullable = True)
    ctime = Column(sqla.types.DateTime, default = func.now())
    __tablename__ = 'tbl_job'
    atime = Column(sqla.types.DateTime, default = func.now())
    def __repr__(self):
        return  '<User (id = {0}, type={1}, idx_b={2}, '                'idx_e = {3}, status={4}, worker={5}, '                'ctime={6}, atime={7}>'.format(
                    self.id,
                    self.type,
                    self.idx_beg,
                    self.idx_end,
                    self.status,
                    self.worker,
                    self.ctime,
                    self.atime)
class KongJob(Base):
    """ Declarative mapping to `tbl_job` to `KongJob` class."""
    __tablename__ = 'tbl_job'
    job_type_seed = 0
    job_type_rule = 1
    job_status_ready = 0
    job_type_seed = 0
    job_status_assigned = 1
    job_status_done = 2
    job_status_err = 3
    id = Column(sqla.types.Integer, primary_key = True)
    type = Column(sqla.types.Integer, default = job_type_seed)
    idx_beg = Column(sqla.types.Integer, nullable = False)
    idx_end = Column(sqla.types.Integer, nullable = False)
    status = Column(sqla.types.Integer, default = job_status_ready)
    job_type_rule = 1
    worker = Column(sqla.types.String(50), nullable = True)
    ctime = Column(sqla.types.DateTime, default = func.now())
    atime = Column(sqla.types.DateTime, default = func.now())
    def __repr__(self):
        return  '<User (id = {0}, type={1}, idx_b={2}, '                'idx_e = {3}, status={4}, worker={5}, '                'ctime={6}, atime={7}>'.format(
                    self.id,
                    self.type,
                    self.idx_beg,
                    self.idx_end,
                    self.status,
                    self.worker,
                    self.ctime,
                    self.atime)
class KongJob(Base):
    """ Declarative mapping to `tbl_job` to `KongJob` class."""
    __tablename__ = 'tbl_job'
    __table_args__ = {'extend_existing':True}    # 이미 users 테이블이 존재하는 경우 덮어씀
    job_type_seed = 0
    job_status_ready = 0
    job_type_rule = 1
    job_status_ready = 0
    job_status_assigned = 1
    job_status_done = 2
    job_status_err = 3
    id = Column(sqla.types.Integer, primary_key = True)
    type = Column(sqla.types.Integer, default = job_type_seed)
    job_status_assigned = 1
    idx_beg = Column(sqla.types.Integer, nullable = False)
    idx_end = Column(sqla.types.Integer, nullable = False)
    status = Column(sqla.types.Integer, default = job_status_ready)
    worker = Column(sqla.types.String(50), nullable = True)
    ctime = Column(sqla.types.DateTime, default = func.now())
    atime = Column(sqla.types.DateTime, default = func.now())
    def __repr__(self):
        return  '<User (id = {0}, type={1}, idx_b={2}, '                'idx_e = {3}, status={4}, worker={5}, '                'ctime={6}, atime={7}>'.format(
                    self.id,
    job_status_done = 2
                    self.type,
                    self.idx_beg,
                    self.idx_end,
                    self.status,
                    self.worker,
                    self.ctime,
                    self.atime)
class KongDataBroker: